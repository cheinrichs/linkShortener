// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDBClient is a mock of DBClient interface
type MockDBClient struct {
	ctrl     *gomock.Controller
	recorder *MockDBClientMockRecorder
}

// MockDBClientMockRecorder is the mock recorder for MockDBClient
type MockDBClientMockRecorder struct {
	mock *MockDBClient
}

// NewMockDBClient creates a new mock instance
func NewMockDBClient(ctrl *gomock.Controller) *MockDBClient {
	mock := &MockDBClient{ctrl: ctrl}
	mock.recorder = &MockDBClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDBClient) EXPECT() *MockDBClientMockRecorder {
	return m.recorder
}

// FindRedirectURLByID mocks base method
func (m *MockDBClient) FindRedirectURLByID(linkID byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRedirectURLByID", linkID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRedirectURLByID indicates an expected call of FindRedirectURLByID
func (mr *MockDBClientMockRecorder) FindRedirectURLByID(linkID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRedirectURLByID", reflect.TypeOf((*MockDBClient)(nil).FindRedirectURLByID), linkID)
}

// RecordView mocks base method
func (m *MockDBClient) RecordView(linkID byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordView", linkID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordView indicates an expected call of RecordView
func (mr *MockDBClientMockRecorder) RecordView(linkID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordView", reflect.TypeOf((*MockDBClient)(nil).RecordView), linkID)
}

// InsertURL mocks base method
func (m *MockDBClient) InsertURL(link string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertURL", link)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertURL indicates an expected call of InsertURL
func (mr *MockDBClientMockRecorder) InsertURL(link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertURL", reflect.TypeOf((*MockDBClient)(nil).InsertURL), link)
}

// GetLinkViewCount mocks base method
func (m *MockDBClient) GetLinkViewCount(id int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkViewCount", id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkViewCount indicates an expected call of GetLinkViewCount
func (mr *MockDBClientMockRecorder) GetLinkViewCount(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkViewCount", reflect.TypeOf((*MockDBClient)(nil).GetLinkViewCount), id)
}
